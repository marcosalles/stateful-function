{"version":3,"sources":["contexts/ThemeContext.js","components/Button.jsx","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","React","createContext","foreground","background","Button","props","theme","useContext","style","color","backgroundColor","label","counterReducer","state","action","type","count","Counter","useReducer","dispatch","onClick","App","position","top","left","height","width","className","paddingLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sLAmBeA,EAFMC,IAAMC,cAVpB,CACLC,WAAY,UACZC,WAAY,SCNC,SAASC,EAAOC,GAC9B,IAAMC,EAAQC,qBAAWR,GACnBS,EAAQ,CACbC,MAAOH,EAAMJ,WACbQ,gBAAiBJ,EAAMH,YAExB,OACC,4BAAQK,MAAOA,GACbH,EAAMM,OCRV,SAASC,EAAeC,EAAOC,GAC7B,OAAOA,EAAOC,MACZ,IAAK,YACH,MAAO,CAAEC,MAAOH,EAAMG,MAAQ,GAChC,IAAK,YACH,MAAO,CAAEA,MAAOH,EAAMG,MAAQ,GAChC,QACE,OAAOH,GAIb,SAASI,IAAW,IAAD,EACaC,qBAAWN,EAAgB,CAAEI,MAAO,IADjD,mBACRA,EADQ,KACRA,MAASG,EADD,KAIjB,OACE,uCACUH,EACR,6BACE,4BAAQI,QALI,kBAAMD,EAAS,CAAEJ,KAAM,gBAKnC,KACA,4BAAQK,QAPI,kBAAMD,EAAS,CAAEJ,KAAM,gBAOnC,OAiCOM,MAzBf,WAEE,OACE,6BACE,kBAACJ,EAAD,MACA,kBAACb,EAAD,CAAQO,MAAM,uBACd,yBAAKH,MAAO,CACVc,SAAU,aAEV,uBACEd,MAAO,CACLc,SAAU,WACVC,IAAK,GACLC,KAAM,EACNC,OAAQ,GACRC,MAAO,IAETC,UAAU,gBARZ,KAUA,2BAAOnB,MAAO,CAAEoB,YAAa,GAAIH,OAAQ,SCtC7BI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b7ae637d.chunk.js","sourcesContent":["import React from 'react';\n\nconst THEMES = {\n\tLIGHT: {\n\t\tforeground: '#000',\n\t\tbackground: '#eee',\n\t},\n\tDARK: {\n\t\tforeground: '#e5e5e5',\n\t\tbackground: '#222',\n\t},\n\tSCHIZO: {\n\t\tforeground: '#12ff12',\n\t\tbackground: '#e726f8',\n\t},\n};\n\nconst ThemeContext = React.createContext(THEMES.DARK);\n\nexport default ThemeContext;\nexport { THEMES };\n","import React, { useContext } from 'react';\nimport ThemeContext from '../contexts/ThemeContext';\n\nexport default function Button(props) {\n\tconst theme = useContext(ThemeContext);\n\tconst style = {\n\t\tcolor: theme.foreground,\n\t\tbackgroundColor: theme.background,\n\t};\n\treturn (\n\t\t<button style={style}>\n\t\t\t{props.label}\n\t\t</button>\n\t)\n};\n","import React, { useReducer } from 'react';\nimport Button from './components/Button';\n\nfunction counterReducer(state, action) {\n  switch(action.type) {\n    case 'INCREMENT': \n      return { count: state.count + 1 };\n    case 'DECREMENT':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  };\n}\n\nfunction Counter() {\n  const [{ count }, dispatch] = useReducer(counterReducer, { count: 0 });\n  const increment = () => dispatch({ type: 'INCREMENT' });\n  const decrement = () => dispatch({ type: 'DECREMENT' });\n  return (\n    <div>\n      Count: {count}\n      <div>\n        <button onClick={decrement}>-</button>\n        <button onClick={increment}>+</button>\n      </div>\n    </div>\n  );\n}\n\n\n\nfunction App() {\n  \n  return (\n    <div>\n      <Counter />\n      <Button label=\"BOTAO SEM CONTEXTO\" />\n      <div style={{\n        position: 'relative',\n      }}>\n        <i\n          style={{\n            position: 'absolute',\n            top: 20,\n            left: 4,\n            height: 20,\n            width: 20,\n          }}\n          className=\"fa fas-iconx\"\n        >X</i>\n        <input style={{ paddingLeft: 28, height: 40 }}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}